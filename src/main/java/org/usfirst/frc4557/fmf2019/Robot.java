// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4557.fmf2019;

import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.GenericHID.Hand;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.kauailabs.navx.frc.AHRS;

import org.usfirst.frc4557.fmf2019.commands.*;
import org.usfirst.frc4557.fmf2019.subsystems.*;
import edu.wpi.first.wpilibj.*;
/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();
    Preferences prefs;

    public static OI oi;
    public static Compressor compressor;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveBase driveBase;
    public static Climber climber;
    public static Intake intake;
    private ClimberUp climbcommand;
    public AHRS ahrs;
    public static boolean isAutonomous = false;
    public static boolean isTurning = false;
    
    public static ClimberWithStablizer autoclimber;

    public static double lowFactor;
    public static double climbDriveSpeed;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {

       
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveBase = new DriveBase();
        climber = new Climber();
        intake = new Intake();


        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it. 
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // compressor = new Compressor(RobotCanID.COMPRESSORID);
        // compressor.setClosedLoopControl(true);

        CameraServer.getInstance().startAutomaticCapture();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
        prefs = Preferences.getInstance();
        
        lowFactor = prefs.getDouble("LowSpeedFactor", 0.7);
        climbDriveSpeed = prefs.getDouble("ClimberDriveSpeed", 0.45) * -1;
        System.out.println("Low Speed = " + lowFactor);
        System.out.println("climber Drive Speed = " + climbDriveSpeed);
        
        autoclimber = new ClimberWithStablizer();
        //climber.rearUp();
        //climber.frontUp();
        //intake.up();
        //intake.wristUp();
        //intake.intakeIn();
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {

        driveBase.drive(oi.playstayController.getY(Hand.kLeft) / -1.1, oi.playstayController.getY(Hand.kRight) / -1.1 );
        //Slow Down the robot when pressed - L2
        if (oi.playstayController.getRawButton(7))
        {
            
            driveBase.drive(oi.playstayController.getY(Hand.kLeft) * lowFactor,
                oi.playstayController.getY(Hand.kRight) * lowFactor);
         }
        
        if (oi.playstayController.getBumper(Hand.kRight )) {   
            climber.frontDown(); 
        } else {
            climber.frontStop(); 
        }
        if (oi.playstayController.getBumper(Hand.kLeft)){
            climber.rearDown();
        } else {
            climber.rearStop();
        }

        


        if (oi.xbox.getY(Hand.kRight) >= 0.2)   { intake.up(); }
        if (oi.xbox.getY(Hand.kRight) <= -0.2)  { intake.down(); }
        if (oi.xbox.getY(Hand.kLeft) <= -0.2)  { intake.wristUp(); }
        if (oi.xbox.getY(Hand.kLeft) >= 0.2)   { intake.wristDown(); }
        if (oi.xbox.getBumper(Hand.kRight))     { intake.intakeIn();} else { intake.intakeOut(); } 
        if (oi.xbox.getBumper(Hand.kLeft))      { intake.pickupOut(); } else { intake.pickupIn(); }
        
        if (oi.xbox.getBButtonPressed())        { climber.driveForward(climbDriveSpeed);}
        if (oi.xbox.getBButtonReleased())       { climber.stop(); }
        if (oi.xbox.getYButton())               { climber.frontUp(); }
        if (oi.xbox.getAButton())               { climber.rearUp(); }


        //if (oi.xbox.getAButton()) { climber.frontDown(); }
        //if (oi.xbox.getStartButton())   { climber.rearDown(); }
        
        
 
        //  if (oi.playstayController.getXButton()){
        //     System.out.println("X Button");
        //     autoclimber.start(); 
        //  }

        //  if (oi.playstayController.getAButton()){
        //      System.out.println("A Button");
        //      autoclimber.isDone = true;
        //  }
        // if (oi.playstayController.getXButton()) { 
        //     isTurning = true;
        //     TurnToAngle t = new TurnToAngle(45);
        //     t.start();
        //  }

        Scheduler.getInstance().run();
    }
}
